[[plugins]]
repo = 'tpope/vim-commentary'
on_cmd = ['Commentary']
on_map = ['gcc', 'gc']

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = ['SplitjoinJoin', 'SplitjoinSplit']
on_map = ['gS', 'gJ']

[[plugins]]
repo  = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile']

[[plugins]]
repo  = 'uarun/vim-protobuf'
on_ft = 'protobuf'

[[plugins]]
repo  = 'stephpy/vim-yaml'
on_ft = ['yml', 'yaml']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown', 'mkd', 'md']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_add = '''
set completeopt+=noselect
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "<C-n>" : "<TAB>"
inoremap <expr><s-tab> pumvisible() ? "<C-p>" : "<TAB>"
autocmd! InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = 'go'
build = 'make'
hook_add = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_def_mapping_enabled = 0
let g:go_term_enabled = 1
let g:go_fmt_command = 'goimports'
let g:go_fmt_fail_silently = 1
let g:go_list_type = 'quickfix'

map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <Leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <Leader>r <Plug>(go-run)
autocmd FileType go nmap <Leader>t <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <Leader>d <Plug>(go-def)
autocmd FileType go nmap <Leader>ga <Plug>(go-alternate-edit)
autocmd FileType go nmap <Leader>gd <Plug>(go-doc)
autocmd FileType go nmap <Leader>gt :GoDeclsDir<CR>
'''
